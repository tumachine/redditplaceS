import { IPixel } from '../models/pixel';

const dummy = (blogs: IBlog[]) => 1;

const totalLikes = (blogs: IBlog[]): number => blogs.reduce((a, b) => a + b.likes, 0);

const favoriteBlog = (blogs: IBlog[]): IBlog => {
  let greatestIndex = 0;

  for (let i = 1; i < blogs.length; i += 1) {
    if (blogs[i].likes > blogs[greatestIndex].likes) {
      greatestIndex = i;
    }
  }
  return blogs[greatestIndex];
};

interface IMostBlogs {
  author: string,
  blogs: number,
}

interface IMostLikes {
  author: string,
  likes: number,
}

const mostBlogs = (blogs: IBlog[]): IMostBlogs => {
  const map = new Map<string, number>();
  blogs.forEach((blog) => {
    const authorBlogs = map.get(blog.author);

    if (authorBlogs) {
      map.set(blog.author, authorBlogs + 1);
    } else {
      map.set(blog.author, 1);
    }
  });

  let maxBlog: IMostBlogs = { author: '', blogs: 0 };
  map.forEach((b, a) => {
    if (b > maxBlog.blogs) {
      maxBlog = { author: a, blogs: b };
    }
  });
  return maxBlog;
};

const mostLikes = (blogs: IBlog[]): IMostLikes => {
  const map = new Map<string, number>();
  blogs.forEach((blog) => {
    const authorBlogs = map.get(blog.author);

    if (authorBlogs) {
      map.set(blog.author, authorBlogs + blog.likes);
    } else {
      map.set(blog.author, blog.likes);
    }
  });

  let maxBlog: IMostLikes = { author: '', likes: 0 };
  map.forEach((b, a) => {
    if (b > maxBlog.likes) {
      maxBlog = { author: a, likes: b };
    }
  });
  return maxBlog;
};

export {
  dummy, totalLikes, favoriteBlog, IMostBlogs, mostBlogs, mostLikes, IMostLikes,

};
